<div class="modal-header">
  <% title_half = (params[:action] == 'new' or params[:action] == 'create' or params[:add_more].present?) ? 'Add' : 'Edit' %>
  <h5 class="modal-title"><%= title_half %> Venue Contact</h5>
  <div id="flashMessage", class="inner_flash_message"></div>
</div>
<div class="modal-body">
  <%= form_for [venue, venue_contact], remote: true do |f| %>
    <div class="form-group">
      <div class="">
        <% if f.object.profile_pic.attached? %>
          <%= image_tag f.object.profile_pic, class: 'img-boundary image-profile-pic' %>
        <% else %>
          <%= image_pack_tag 'home/profile_placeholder.svg', class: 'img-boundary image-profile-pic' %>
        <% end %>
        <div class="content-profile-info d-inline badge badge-edit">
          <label class="btn-avatar">
            <i class="fa fa-pencil-alt fs-16 text-white"></i>
            <span style="display:none;">
              <%= f.file_field :profile_pic, class: "avatar", id: "avatar-upload1", onchange: "readURL(this)", accept: "image/*" %>
            </span>
            <ul class="parsley-errors-list filled" id="parsley-id-5" aria-hidden="false">
              <li class="parsley-required" id="image-val-msg1" style="display: none">Please upload only image.
              </li>
            </ul>
          </label>
        </div>
      </div>
    </div>
    <div class="form-group">
      <%= f.label :email, 'Email Address', class: 'text-capitalize fs-17 asterisk' %><br />
      <%= f.email_field :email, class: 'form-control', required: true, pattern: Field::PATTERNS["Email".to_sym], placeholder: 'Enter Email Address', disabled: !f.object.new_record? %>
    </div>

    <% unless f.object.new_record? %>
      <% status_invited = f.object.user.status == User::STATUS_INVITED %>
      <div class="form-group">
        <%= f.label :user_status, class: 'text-capitalize fs-17' %><br />  
        <% if status_invited || f.object.user == current_user %>
          <%= text_field_tag :status, f.object.user.status.capitalize, disabled: true, class: 'form-control' %>
        <% else %>
          <%= select_tag :status, options_for_select(user_status_option(User::STATUS), f.object.user.status), { include_blank: false, class: 'form-control user_status_select' } %>
        <% end %>
      </div>
    <% end %>

    <% venue_contact_klass = Klass.venue_contact %>
    <% venue_contact_klass.fields.each do |field| %>
      <div class="form-group">
        <%= render partial: 'forms/field', locals: { f: f, field_name: field.name, field_label: field.label, column_type: field.column_type, data: data, custom: field.custom, field: field, value: field.column_type == 'File' ? '' : venue_contact.send(field.name) } %>
      </div>
    <% end %>

    <% if params[:inside].present? %>
      <%= f.hidden_field :inside, value: true %>
    <% end %>
    <div class="modal-footer modal-footer-fixed">
      <% save_button_title = f.object.new_record? ? 'Add' : 'Save' %>
      <%= f.submit save_button_title, class: "btn btn-primary add_venue_contact" %>
      <%= f.submit 'Add More', name: 'add_more', value: 'Add More', class: "btn btn-primary add_venue_contact" %>
      <button type="button" class="btn btn-light bg-light-gray text-dark" data-dismiss="modal">Close</button>
    </div>
  <% end %>
</div>
<script>
  function readURL(input) {
    if (input.files && input.files[0]) {
      var reader = new FileReader();
      reader.onload = function(e) {
        $('.image-profile-pic').attr('src', e.target.result);
      }
      reader.readAsDataURL(input.files[0]);
    }
  }
  $("#avatar-upload1").change(function() {
    var val = $(this).val();
    if (!val.match(/(?:gif|jpg|png|bmp|jpeg|svg)$/)) {
      $("#image-val-msg").css('display', 'block');
      return false
    }
    $('#img_prev1').removeClass('hidden');
    readURL(this);
  });

  var autocomplete;
  var address1Field;
  var address2Field;
  var postalField;

  function initAutocomplete() {
    address1Field = document.querySelector("#venue_contact_street_address");
    address2Field = document.querySelector("#address2");
    postalField = document.querySelector("#venue_contact_zip_code");
    autocomplete = new google.maps.places.Autocomplete(address1Field, {
      fields: ["address_components", "geometry"],
      types: ["address"],
    });
    address1Field.focus();
    autocomplete.addListener("place_changed", fillInAddress);
  }

  function fillInAddress() {
    const place = autocomplete.getPlace();
    var address1 = "";
    var postcode = "";
    for (const component of place.address_components) {
      const componentType = component.types[0];

      switch (componentType) {
        case "street_number": {
          address1 = `${component.long_name} ${address1}`;
          break;
        }

        case "route": {
          address1 += component.short_name;
          break;
        }

        case "postal_code": {
          postcode = `${component.long_name}${postcode}`;
          break;
        }

        case "postal_code_suffix": {
          postcode = `${postcode}-${component.long_name}`;
          break;
        }
        case "locality":
          $("#venue_contact_city").val(component.long_name)
          break;

        case "administrative_area_level_1": {
          $("#venue_contact_state").val(component.long_name)
          break;
        }
        case "country":
          $("#venue_contact_country").val(component.long_name)
          break;
      }
    }
    address1Field.value = address1;
    postalField.value = postcode;
  }
</script>