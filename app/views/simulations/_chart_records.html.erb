<div class="admin-table bg-white table-responsive mt-3">
  <table class="table table-bordered w-100 mb-5 text-center">
    <thead class="thead-dark">
      <th>Name</th>
      <th></th>
      <th>Daily</th>
      <th>Weekly</th>
      <th>Monthly</th>
      <th>Annually</th>
    </thead>
    <tbody>
      <tr>
        <td colspan="2" class="text-left"><b>Seating Capacity</b></td>
        <td><%= number_with_delimiter(@simulations[:daily_seating_capacity].to_i, :delimiter => ',') %></td>
        <td><%= number_with_delimiter(@simulations[:week_seating_capacity].to_i, :delimiter => ',') %></td>
        <td><%= number_with_delimiter(@simulations[:month_seating_capacity].to_i, :delimiter => ',') %></td>
        <td><%= number_with_delimiter(@simulations[:year_seating_capacity].to_i, :delimiter => ',') %></td>
      </tr>
      <tr>
        <td rowspan="2" class="text-left"><b>Visitor Attendance</b></td>
          <tr>
            <td> Per Day</td>
            <td><%= number_with_delimiter(@simulations[:daily_visitor_attendance].to_i, :delimiter => ',') %></td>
            <td><%= number_with_delimiter(@simulations[:week_visitor_attendance].to_i, :delimiter => ',') %></td>
            <td><%= number_with_delimiter(@simulations[:month_visitor_attendance].to_i, :delimiter => ',') %></td>
            <td><%= number_with_delimiter(@simulations[:year_visitor_attendance].to_i, :delimiter => ',') %></td>
          </tr>
          <tr>
            <td></td>
            <td>Annually</td>
            <td><%= number_with_delimiter(@simulations[:daily_annual_visitor].to_i, :delimiter => ',') %></td>
            <td><%= number_with_delimiter(@simulations[:week_annual_visitor].to_i, :delimiter => ',') %></td>
            <td><%= number_with_delimiter(@simulations[:month_annual_visitor].to_i, :delimiter => ',') %></td>
            <td><%= number_with_delimiter(@simulations[:year_annual_visitor].to_i, :delimiter => ',') %></td>
          </tr>
      </tr>
      <tr>
        <td rowspan="2" class="text-left"><b>WIFILP</b></td>
        <tr>
          <td> Per Day</td>
          <td><%= number_with_delimiter(@simulations[:daily_wifi_lp_login].to_i, :delimiter => ',') %></td>
          <td><%= number_with_delimiter(@simulations[:week_wifi_lp_login].to_i, :delimiter => ',') %></td>
          <td><%= number_with_delimiter(@simulations[:month_wifi_lp_login].to_i, :delimiter => ',') %></td>
          <td><%= number_with_delimiter(@simulations[:year_wifi_lp_login].to_i, :delimiter => ',') %></td>
        </tr>
        <tr>
          <td></td>
          <td>Annually</td>
          <td><%= number_with_delimiter(@simulations[:daily_annual_wifi_lp_login].to_i, :delimiter => ',') %></td>
          <td><%= number_with_delimiter(@simulations[:week_annual_wifi_lp_login].to_i, :delimiter => ',') %></td>
          <td><%= number_with_delimiter(@simulations[:month_annual_wifi_lp_login].to_i, :delimiter => ',') %></td>
          <td><%= number_with_delimiter(@simulations[:year_annual_wifi_lp_login].to_i, :delimiter => ',') %></td>
        </tr>
      </tr>
      <tr>
        <td rowspan="2" class="text-left"><b>CPM LP Revenue</b></td>
        <tr>
          <td> Per Day</td>
          <td><%= number_with_delimiter(@simulations[:daily_lp_impression].to_i, :delimiter => ',') %></td>
          <td><%= number_with_delimiter(@simulations[:week_lp_impression].to_i, :delimiter => ',') %></td>
          <td><%= number_with_delimiter(@simulations[:month_lp_impression].to_i, :delimiter => ',') %></td>
          <td><%= number_with_delimiter(@simulations[:year_lp_impression].to_i, :delimiter => ',') %></td>
        </tr>
        <tr>
          <td></td>
          <td>Annually</td>
          <td><%= number_with_delimiter(@simulations[:daily_annual_wifi_lp_login].to_i, :delimiter => ',') %></td>
          <td><%= number_with_delimiter(@simulations[:week_annual_wifi_lp_login].to_i, :delimiter => ',') %></td>
          <td><%= number_with_delimiter(@simulations[:month_annual_wifi_lp_login].to_i, :delimiter => ',') %></td>
          <td><%= number_with_delimiter(@simulations[:year_annual_wifi_lp_login].to_i, :delimiter => ',') %></td>
        </tr>
      <tr>
        <td colspan="2" class="text-left"><b>User Impression</b></td>
        <td><%= number_with_delimiter(@simulations[:daily_user_impression].to_i, :delimiter => ',') %></td>
        <td><%= number_with_delimiter(@simulations[:week_user_impression].to_i, :delimiter => ',') %></td>
        <td><%= number_with_delimiter(@simulations[:month_user_impression].to_i, :delimiter => ',') %></td>
        <td><%= number_with_delimiter(@simulations[:year_user_impression].to_i, :delimiter => ',') %></td>
      </tr>
      <tr>
        <td colspan="2" class="text-left"><b>CPM Impression Revenue</b></td>
        <td><%= number_with_delimiter(@simulations[:daily_cpm_impression].to_i, :delimiter => ',') %></td>
        <td><%= number_with_delimiter(@simulations[:week_cpm_impression].to_i, :delimiter => ',') %></td>
        <td><%= number_with_delimiter(@simulations[:month_cpm_impression].to_i, :delimiter => ',') %></td>
        <td><%= number_with_delimiter(@simulations[:year_cpm_impression].to_i, :delimiter => ',') %></td>
      </tr>
      <tr>
        <td colspan="2" class="text-left"><b>WIFI Revenue</b></td>
        <td><%= number_with_delimiter(@simulations[:daily_wifi_revenue].to_i, :delimiter => ',') %></td>
        <td><%= number_with_delimiter(@simulations[:week_wifi_revenue].to_i, :delimiter => ',') %></td>
        <td><%= number_with_delimiter(@simulations[:month_wifi_revenue].to_i, :delimiter => ',') %></td>
        <td><%= number_with_delimiter(@simulations[:year_wifi_revenue].to_i, :delimiter => ',') %></td>
      </tr>
      
    </tbody>
  </table>
</div>
<div class="row">
  <div class="col-md-6 mb-4">
    <div class="box-body admin-box bg-white p-4 h-100 rounded-10 table-bordered border-radius-5">
      <div class="chart-header">
        <h3 class="chart-main-title mb-0">Seating Capacity </h3>
        <p class="chart-sub-title text-blue3 mb-3"></p>
        <div>
  				<%= column_chart(@simulations[:seating_capacity], id: 'seating_capacity') %>
  			</div>
        <div class="chart-labels row justify-content-around mt-4 border rounded p-3 text-gray fs-14 text-break">
          <span class="col-12 col-sm-6 col-xl-3">Daily<br> <b><%= number_with_delimiter(@simulations[:daily_seating_capacity].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3">Weekly<br><b><%= number_with_delimiter(@simulations[:week_seating_capacity].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3">Monthly<br> <b><%= number_with_delimiter(@simulations[:month_seating_capacity].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3">Annually<br><b><%= number_with_delimiter(@simulations[:year_seating_capacity].to_i, :delimiter => ',') %></b></span>
        </div>
  		</div>
  	</div>
  </div>
  <div class="col-md-6 mb-4">
    <div class="box-body admin-box bg-white p-4 h-100 rounded-10 table-bordered border-radius-5">
      <div class="chart-header">
        <h3 class="chart-main-title mb-0">Visitor Attendance</h3>
        <p class="chart-sub-title text-blue3 mb-3"></p>
        <div>
  				<%= line_chart(@simulations[:visitor_attendance], id: 'vistior_chart') %>
  			</div>
        <div class="chart-labels row justify-content-around mt-4 border rounded p-3 text-gray fs-14 text-break">
          <span class="col-12 col-sm-6 col-xl-3">Daily<br> <b><%= number_with_delimiter(@simulations[:daily_visitor_attendance].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3">Weekly<br><b><%= number_with_delimiter(@simulations[:week_visitor_attendance].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3">Monthly<br> <b><%= number_with_delimiter(@simulations[:month_visitor_attendance].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3">Annually<br> <b><%= number_with_delimiter(@simulations[:year_visitor_attendance].to_i, :delimiter => ',') %></b></span>
        </div>
  		</div>
  	</div>
  </div>
</div>
<div class="row">
  <div class="col-md-6 mb-4">
    <div class="box-body admin-box bg-white p-4 h-100 rounded-10 table-bordered border-radius-5">
      <div class="chart-header">
        <h3 class="chart-main-title mb-0">WIFILP</h3>
        <p class="chart-sub-title text-blue3 mb-3"></p>
        <div>
          <%= column_chart(@simulations[:wifi_lp_login], id: 'wifi_lp') %>
        </div>
        <div class="chart-labels row justify-content-around mt-4 border rounded p-3 text-gray fs-14 text-break">
          <span class="col-12 col-sm-6 col-xl-3 ">Daily<br> <b><%= number_with_delimiter(@simulations[:daily_wifi_lp_login].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3 ">Weekly<br><b><%= number_with_delimiter(@simulations[:week_wifi_lp_login].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3 ">Monthly<br> <b><%= number_with_delimiter(@simulations[:month_wifi_lp_login].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3 ">Annually<br><b><%= number_with_delimiter(@simulations[:year_wifi_lp_login].to_i, :delimiter => ',') %></b></span>
        </div>
      </div>
    </div>
  </div>
  <div class="col-md-6 mb-4">
    <div class="box-body admin-box bg-white p-4 h-100 rounded-10 table-bordered border-radius-5">
      <div class="chart-header">
        <h3 class="chart-main-title mb-0">CPM LP Revenue</h3>
        <p class="chart-sub-title text-blue3 mb-3"></p>
        <div>
  				<%= column_chart(@simulations[:lp_impression], id: 'cpm_lp') %>
  			</div>
        <div class="chart-labels row justify-content-around mt-4 border rounded p-3 text-gray fs-14 text-break">
          <span class="col-12 col-sm-6 col-xl-3">Daily<br> <b><%= number_with_delimiter(@simulations[:daily_lp_impression].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3">Weekly<br><b><%= number_with_delimiter(@simulations[:week_lp_impression].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3">Monthly<br> <b><%= number_with_delimiter(@simulations[:month_lp_impression].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3">Annually<br><b><%= number_with_delimiter(@simulations[:year_lp_impression].to_i, :delimiter => ',') %></b></span>
        </div>
  		</div>
  	</div>
  </div>
</div>
<div class="row">
  <div class="col-md-6 mb-4">
    <div class="box-body admin-box bg-white p-4 h-100 rounded-10 table-bordered border-radius-5">
      <div class="chart-header">
        <h3 class="chart-main-title mb-0">User Impression</h3>
        <p class="chart-sub-title text-blue3 mb-3"></p>
        <div>
  				<%= column_chart(@simulations[:user_impression], id: 'user_impression') %>
  			</div>
        <div class="chart-labels row justify-content-around mt-4 border rounded p-3 text-gray fs-14 text-break">
          <span class="col-12 col-sm-6 col-xl-3">Daily<br> <b><%= number_with_delimiter(@simulations[:daily_user_impression].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3">Weekly<br><b><%= number_with_delimiter(@simulations[:week_user_impression].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3">Monthly<br> <b><%= number_with_delimiter(@simulations[:month_user_impression].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3">Annually<br><b><%= number_with_delimiter(@simulations[:year_user_impression].to_i, :delimiter => ',') %></b></span>
        </div>
  		</div>
  	</div>
  </div>
  <div class="col-md-6 mb-4">
    <div class="box-body admin-box bg-white p-4 h-100 rounded-10 table-bordered">
      <div class="chart-header">
        <h3 class="chart-main-title mb-0">CPM Impression Revenue</h3>
        <p class="chart-sub-title text-blue3 mb-3"></p>
        <div>
  				<%= column_chart(@simulations[:cpm_impression], id: 'cpm_impression') %>
  			</div>
        <div class="chart-labels row justify-content-around mt-4 border rounded p-3 text-gray fs-14 text-break">
          <span class="col-12 col-sm-6 col-xl-3">Daily<br> <b><%= number_with_delimiter(@simulations[:daily_cpm_impression].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3">Weekly<br><b><%= number_with_delimiter(@simulations[:week_cpm_impression].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3">Monthly<br> <b><%= number_with_delimiter(@simulations[:month_cpm_impression].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3">Annually<br><b><%= number_with_delimiter(@simulations[:year_cpm_impression].to_i, :delimiter => ',') %></b></span>
        </div>
  		</div>
  	</div>
  </div>
</div>
<div class="row">
  <div class="col-md-12 mb-4">
    <div class="box-body admin-box bg-white p-4 h-100 rounded-10 table-bordered border-radius-5">
      <div class="chart-header">
        <h3 class="chart-main-title mb-0">WIFI Revenue</h3>
        <p class="chart-sub-title text-blue3 mb-3"></p>
        <div>
          <%= area_chart(@simulations[:wifi_revenue], id: 'wifi_revenue') 
          %>
        </div>
        <div class="chart-labels row justify-content-around mt-4 border rounded p-3 text-gray fs-14 text-break">
          <span class="col-12 col-sm-6 col-xl-3">Daily<br> <b><%= number_with_delimiter(@simulations[:daily_wifi_revenue].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3">Weekly<br><b><%= number_with_delimiter(@simulations[:week_wifi_revenue].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3">Monthly<br> <b><%= number_with_delimiter(@simulations[:month_wifi_revenue].to_i, :delimiter => ',') %></b></span>
          <span class="col-12 col-sm-6 col-xl-3">Annually<br><b><%= number_with_delimiter(@simulations[:year_wifi_revenue].to_i, :delimiter => ',') %></b></span>
        </div>
      </div>
    </div>
  </div>
</div>
<script type="text/javascript">
  $(document).ready(function (){
    option = "<%= params[:option] %>"
    var chart = Chartkick.charts["seating_capacity"]
    var visitor_chart = Chartkick.charts["vistior_chart"]
    var wifi_lp = Chartkick.charts["wifi_lp"]
    var cpm_lp = Chartkick.charts["cpm_lp"]
    var user_impression = Chartkick.charts["user_impression"]
    var cpm_impression = Chartkick.charts["cpm_impression"]
    var wifi_revenue = Chartkick.charts["wifi_revenue"]

      var newOptions = {
        messages: {empty: "No Records available."},
        colors: ["#0526FF", "#dc3d1f", "#DDDFFF", "#DdCFFF"],
        library: {
          messages: {empty: "No Records available."},
          thousands: ",",
          tooltips: {
            callbacks: {
              title: function(value){
                if (option == "Monthly"){
                  var curr = new Date(value[0].label); // get current date
                  var first = curr.getDate() // First day is the day of the month - the day of the week
                  var last = first + 6; // last day is the first day + 6
                  var firstday = new Date(curr.setDate(first)); // 06-Jul-2014
                  var lastday = new Date(curr.setDate(last));
                  debugger
                  start_date = (firstday.getMonth() + 1).toString().padStart(2, '0') + '/' + firstday.getDate().toString().padStart(2, '0') + '/' +  firstday.getFullYear()
                  end_date = (lastday.getMonth() + 1).toString().padStart(2, '0') + '/' +lastday.getDate().toString().padStart(2, '0') + '/' +  lastday.getFullYear()
                  // debugger
                  // d = new Date(value[0].label);
                  // month = d.getMonth() + 1
                  // str = d.getDate() + '/' + month + '/' + d.getFullYear();
                  return start_date+" To "+end_date;
                }else if(option == "Annually") {
                  var date = new Date(value[0].label);
                  var firstday = new Date(date.getFullYear(), date.getMonth(), 1);
                  var lastday = new Date(date.getFullYear(), date.getMonth() + 1, 0);
                  start_date = (firstday.getMonth() + 1).toString().padStart(2, '0') + '/' + firstday.getDate().toString().padStart(2, '0') + '/' + firstday.getFullYear()
                  end_date = (lastday.getMonth() + 1).toString().padStart(2, '0') + '/' + lastday.getDate().toString().padStart(2, '0') + '/' +  lastday.getFullYear()
                  return start_date+" To "+end_date;
                }
              },
              label: function(tooltipItem) {
                return (parseInt(tooltipItem.value)).toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,")
              }
            }
          },
          plugins: {
            datalabels: {
              display: true,
              align: 'end',
              anchor: 'end',
              backgroundColor: function(context) {
                return context.dataset.backgroundColor;
              },
              borderRadius: 4,
              color: 'white',
              font: {
                weight: 'bold'
              },
              formatter: function(value) {
                return (parseInt(value)).toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,")
              },
              padding: 15
            }
          },

          scales: {
            yAxes: [{
              ticks: {
                callback: function(value) {
                  return value.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,")
                }
              }
            }],
            xAxes: [{
                ticks: {
                  callback: function(value, i) {
                    d = new Date(value);
                    if (d == "Invalid Date"){
                      str = value
                    }else{
                      str = (d.getMonth() + 1).toString().padStart(2, '0') + '/' + d.getDate().toString().padStart(2, '0') + '/' +  d.getFullYear();
                      if (option == 'Monthly'){
                        str = " Week "+(i+1)
                      }else if(option == 'Annually'){
                        str = d.toLocaleString('default', { month: 'long' });
                      }else{
                        
                      }
                    }
                    return str
                  }
                }
            }],
          }
        }
      }

      var mycustomflag = true

      var newOptions2 = {
        messages: {empty: "No Records available."},
        library: {
          thousands: ",",
          colors: ["#0526FF", "#dc3d1f", "#DDDFFF", "#DCCFFF"],
          tooltips: {
            callbacks: {
              title: function(value){
                if (option == "Monthly"){
                  var curr = new Date(value[0].label); // get current date
                  var first = curr.getDate() // First day is the day of the month - the day of the week
                  var last = first + 6; // last day is the first day + 6
                  var firstday = new Date(curr.setDate(first)); // 06-Jul-2014
                  var lastday = new Date(curr.setDate(last));
                  start_date = (firstday.getMonth() + 1).toString().padStart(2, '0') + '/' + firstday.getDate().toString().padStart(2, '0') + '/' +  firstday.getFullYear()
                  end_date = (lastday.getMonth() + 1).toString().padStart(2, '0') + '/' + lastday.getDate().toString().padStart(2, '0') + '/' +  lastday.getFullYear()
                  // debugger
                  // d = new Date(value[0].label);
                  // month = d.getMonth() + 1
                  // str = d.getDate() + '/' + month + '/' + d.getFullYear();
                  return start_date+" To "+end_date;
                }else if(option == "Annually") {
                  var date = new Date(value[0].label);
                  var firstday = new Date(date.getFullYear(), date.getMonth(), 1);
                  var lastday = new Date(date.getFullYear(), date.getMonth() + 1, 0);
                  start_date = (firstday.getMonth() + 1).toString().padStart(2, '0') + '/' + firstday.getDate().toString().padStart(2, '0') + '/' +  firstday.getFullYear()
                  end_date = (lastday.getMonth() + 1).toString().padStart(2, '0') + '/' +lastday.getDate().toString().padStart(2, '0') + '/' +  lastday.getFullYear()
                  return start_date+" To "+end_date;
                }
              },
              label: function(tooltipItem) {
                return (parseInt(tooltipItem.value)).toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,")
              }
            }
          },
          plugins: {
            datalabels: {
              display: true,
              backgroundColor: function(context) {
                return context.dataset.backgroundColor;
              },
              borderRadius: 4,
              color: 'white',
              font: {
                weight: 'bold'
              },
              formatter: function(value) {
                return (parseInt(value)).toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,")
              },
              padding: 15
            }
          },
          scales: {
            yAxes: [{
              ticks: {
                callback: function(value) {
                  return value.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,")
                }
              }
            }],
            xAxes: [{
                ticks: {
                  callback: function(value, ind) {
                    value1 = value
                    if (option == 'Weekly' || option == "Today"){
                      value1 = value1.substring(0, value1.length - 1);
                    }
                    d = new Date(value1);
                    if (d == "Invalid Date"){
                      str = value
                    }else{
                      str = (d.getMonth() + 1).toString().padStart(2, '0') + '/' + d.getDate().toString().padStart(2, '0') + '/' +  new Date().getFullYear();
                      if (option == 'Monthly'){
                        str = " Week "+(ind+1)
                      }else if(option == 'Annually'){
                        str = d.toLocaleString('default', { month: 'long' });
                      }
                    }
                    return str
                  }
                }
            }]
          }
        }
      }

    var mergedOptions = jQuery.extend(chart.options,newOptions)
    chart.setOptions(mergedOptions);
    var mergedOptions = jQuery.extend(visitor_chart.options, newOptions2)
    visitor_chart.setOptions(mergedOptions);
    var WifiLP = jQuery.extend(wifi_lp.options,newOptions)
    wifi_lp.setOptions(WifiLP);
    var CPMLP = jQuery.extend(cpm_lp.options,newOptions)
    cpm_lp.setOptions(CPMLP);
    var UserImpressionOption = jQuery.extend(user_impression.options,newOptions)
    user_impression.setOptions(UserImpressionOption);
    var CPMImpressionOption = jQuery.extend(cpm_impression.options,newOptions)
    cpm_impression.setOptions(CPMImpressionOption);
    var WifiOptions = jQuery.extend(wifi_revenue.options,newOptions2)
    wifi_revenue.setOptions(WifiOptions);
  })
</script>